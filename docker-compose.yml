# Docker Compose file for Showcase Micro-Frontend Architecture

services:
  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: showcase-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: showcase
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./express/src/seed:/docker-entrypoint-initdb.d
    networks:
      - showcase-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  # Express API Server
  express:
    build:
      context: ./express
      dockerfile: Dockerfile
    container_name: showcase-express
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGO_URI: mongodb://admin:password123@mongodb:27017/showcase?authSource=admin
      JWT_SECRET: your-super-secure-jwt-secret-key-at-least-32-characters-long-for-production
      JWT_EXPIRES_IN: 1d
      BCRYPT_ROUNDS: 12
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - showcase-network
    volumes:
      - express_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # NX Monorepo Shared Libraries
  nx-monorepo:
    build:
      context: ./nx-monorepo
      dockerfile: Dockerfile
    container_name: showcase-nx-libs
    restart: "no"
    networks:
      - showcase-network
    volumes:
      - nx_packages:/app/packages

  # React Remote Application
  react-remote:
    build:
      context: ./react-remote
      dockerfile: Dockerfile
    container_name: showcase-react-remote
    restart: unless-stopped
    ports:
      - "3001:3001"
    networks:
      - showcase-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vue Remote Application
  vue-remote:
    build:
      context: ./vue-remote
      dockerfile: Dockerfile
    container_name: showcase-vue-remote
    restart: unless-stopped
    ports:
      - "3002:3002"
    networks:
      - showcase-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular Remote Application
  angular-remote:
    build:
      context: ./angular-remote
      dockerfile: Dockerfile
    container_name: showcase-angular-remote
    restart: unless-stopped
    ports:
      - "3004:3004"
    networks:
      - showcase-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TypeScript Remote Application
  ts-remote:
    build:
      context: ./ts-remote
      dockerfile: Dockerfile
    container_name: showcase-ts-remote
    restart: unless-stopped
    ports:
      - "3005:3005"
    networks:
      - showcase-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # JavaScript Remote Application
  js-remote:
    build:
      context: ./js-remote
      dockerfile: Dockerfile
    container_name: showcase-js-remote
    restart: unless-stopped
    ports:
      - "3006:3006"
    networks:
      - showcase-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vue Shell Host Application
  shell-vue:
    build:
      context: ./shell-vue
      dockerfile: Dockerfile
    container_name: showcase-shell-vue
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - react-remote
      - vue-remote
      - angular-remote
      - ts-remote
      - js-remote
      - express
    networks:
      - showcase-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional - disabled due to dependency issues)
  # Enable this when all upstream services are confirmed working
  # nginx:
  #   image: nginx:alpine
  #   container_name: showcase-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "8080:80"
  #     - "8443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - nginx_logs:/var/log/nginx
  #   depends_on:
  #     - shell-vue
  #     - express
  #     - react-remote
  #     - vue-remote
  #     - angular-remote
  #     - ts-remote
  #     - js-remote
  #   networks:
  #     - showcase-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:80/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

# Networks
networks:
  showcase-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  mongodb_data:
    driver: local
  express_logs:
    driver: local
  nx_packages:
    driver: local
  nginx_logs:
    driver: local