# Run as nginx user (required for proper permissions)
user nginx;

# PID file location (needs to be writable)
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=shell:10m rate=5r/s;

    # DNS resolver for dynamic upstream resolution
    resolver 127.0.0.11 valid=30s;
    
    # Upstream definitions with fallback
    upstream shell_app {
        server shell-vue:3000 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3000 backup down;
    }
    
    upstream api_server {
        server express:5000 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:5000 backup down;
    }

    upstream react_remote {
        server react-remote:3001 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3001 backup down;
    }

    upstream vue_remote {
        server vue-remote:3002 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3002 backup down;
    }

    upstream angular_remote {
        server angular-remote:3004 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3004 backup down;
    }

    upstream ts_remote {
        server ts-remote:3005 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3005 backup down;
    }

    upstream js_remote {
        server js-remote:3006 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:3006 backup down;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Forwarded-Proto $scheme;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        
        # Handle preflight requests
        location ~* "^/api/.*" {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 86400;
                add_header Content-Type "text/plain charset=UTF-8";
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # API routes - proxy to Express server
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://api_server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Micro-frontend remote entry points
        location /react-remote/ {
            proxy_pass http://react_remote/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No caching for remoteEntry.js
            location ~* /remoteEntry\.js$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                proxy_pass http://react_remote;
            }
        }
        
        location /vue-remote/ {
            proxy_pass http://vue_remote/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No caching for remoteEntry.js
            location ~* /remoteEntry\.js$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                proxy_pass http://vue_remote;
            }
        }
        
        location /angular-remote/ {
            proxy_pass http://angular_remote/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No caching for remoteEntry.js
            location ~* /remoteEntry\.js$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                proxy_pass http://angular_remote;
            }
        }
        
        location /ts-remote/ {
            proxy_pass http://ts_remote/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No caching for remoteEntry.js
            location ~* /remoteEntry\.js$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                proxy_pass http://ts_remote;
            }
        }
        
        location /js-remote/ {
            proxy_pass http://js_remote/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No caching for remoteEntry.js
            location ~* /remoteEntry\.js$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                proxy_pass http://js_remote;
            }
        }
        
        # Shell application - default route
        location / {
            limit_req zone=shell burst=10 nodelay;
            
            proxy_pass http://shell_app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
    }
}